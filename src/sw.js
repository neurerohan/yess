import { cleanupOutdatedCaches, precacheAndRoute } from 'workbox-precaching';
import { registerRoute } from 'workbox-routing';
import { CacheFirst, NetworkFirst } from 'workbox-strategies';
import { ExpirationPlugin } from 'workbox-expiration';
import { CacheableResponsePlugin } from 'workbox-cacheable-response';
import { BackgroundSyncPlugin } from 'workbox-background-sync';

// --- Precache the App Shell --- 
// This line injects the list of files generated by Vite build to be precached.
// 'self.__WB_MANIFEST' is a placeholder that vite-plugin-pwa replaces.
precacheAndRoute(self.__WB_MANIFEST);

// --- Cleanup Old Caches --- 
// Remove outdated precached assets during activation
cleanupOutdatedCaches();

// --- Runtime Caching Strategies ---

// 1. Cache First for Static Assets (Fonts, Images)
registerRoute(
  ({ request }) => request.destination === 'font' || request.destination === 'image',
  new CacheFirst({
    cacheName: 'static-assets-cache',
    plugins: [
      // Ensure only valid responses are cached (status 0 for opaque responses, 200 for normal)
      new CacheableResponsePlugin({
        statuses: [0, 200],
      }),
      // Set expiration for cached assets (e.g., 30 days)
      new ExpirationPlugin({
        maxEntries: 60, // Max number of entries in this cache
        maxAgeSeconds: 30 * 24 * 60 * 60, // 30 Days
      }),
    ],
  })
);

// 2. Network First for API Calls (e.g., Kalimati Prices)
// Tries network first, uses cache if offline.
const apiBackgroundSyncPlugin = new BackgroundSyncPlugin('api-retry-queue', {
  maxRetentionTime: 24 * 60, // Retry for up to 24 hours (in minutes)
});

registerRoute(
  // IMPORTANT: Adjust this regex if your API path is different!
  ({ url }) => url.pathname.startsWith('/api/'), // Match API calls starting with /api/
  new NetworkFirst({
    cacheName: 'api-cache',
    networkTimeoutSeconds: 10, // How long to wait for network before falling back to cache
    plugins: [
      // Ensure only valid responses are cached
      new CacheableResponsePlugin({
        statuses: [0, 200],
      }),
      // Set expiration for cached API responses (e.g., 1 day)
      new ExpirationPlugin({
        maxEntries: 50,
        maxAgeSeconds: 1 * 24 * 60 * 60, // 1 Day
      }),
      // Use the Background Sync plugin to retry failed requests
      apiBackgroundSyncPlugin,
    ],
  })
);

// --- Basic Navigation Handling (Optional but Recommended) ---
// This helps ensure that navigation requests (e.g., for HTML pages)
// are handled correctly, especially in offline scenarios.
// You might adjust this based on your app's structure.
/*
registerRoute(
  ({ request }) => request.mode === 'navigate',
  new NetworkFirst({
    cacheName: 'navigation-cache',
    plugins: [
      new CacheableResponsePlugin({
        statuses: [200],
      }),
    ],
  })
);
*/

// Optional: Add skipWaiting and clientsClaim for faster updates
self.addEventListener('message', (event) => {
  if (event.data && event.data.type === 'SKIP_WAITING') {
    self.skipWaiting();
  }
});

// You might need clientsClaim if you want the updated service worker
// to take control of existing pages immediately.
// self.clients.claim(); 